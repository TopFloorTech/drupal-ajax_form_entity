<?php

/**
 * Implements hook_field_formatter_info().
 *
 * @see ajax_form_entity_field_collection_field_formatter_view()
 */
function ajax_form_entity_field_collection_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'ajax_field_collection' => array(
      'label' => t('Field collection edit in place'),
      'field types' => array('field_collection'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see ajax_form_entity_field_collection_field_formatter_info()
 */
function ajax_form_entity_field_collection_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $form_state = array();
  form_load_include($form_state, 'inc', 'node', 'field_collection.pages');
  switch ($display['type']) {
    case 'ajax_field_collection':
     $view_mode = !empty($display['settings']['view_mode']) ? $display['settings']['view_mode'] : 'full';
      foreach ($items as $delta => $item) {
        if ($field_collection = field_collection_field_get_entity($item)) {
          $element[$delta]['entity'] = $field_collection->view($view_mode);
        }
      }
      field_collection_field_formatter_links($element, $entity_type, $entity, $field, $instance, $langcode, $items, $display);
      break;
  }
  
  // Add form element at the end. //TODO : check wether we should add or not (permissions, number of fields...).
  $settings = variable_get('ajax_form_entity_' . $entity_type . '_' . $entity->type, NULL);
  // Set global variable 
  // @see ajax_form_entity_form_alter
  global $_ajax_form_entity_field_collection;
  $_ajax_form_entity_field_collection['host_entity_type'] = $entity_type;
  $_ajax_form_entity_field_collection['host_entity_id'] = $entity->{$settings['id']};      

  $new_form_build = field_collection_item_add($field['field_name'], $entity_type , $entity->{$settings['id']});  
  $element['#suffix'] .= drupal_render($new_form_build);

  return $element;
}
